// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbMsg.proto

#ifndef PROTOBUF_PbMsg_2eproto__INCLUDED
#define PROTOBUF_PbMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PbMsg_2eproto();
void protobuf_AssignDesc_PbMsg_2eproto();
void protobuf_ShutdownFile_PbMsg_2eproto();

class CS_PING;
class SC_PONG;

// ===================================================================

class CS_PING : public ::google::protobuf::Message {
 public:
  CS_PING();
  virtual ~CS_PING();

  CS_PING(const CS_PING& from);

  inline CS_PING& operator=(const CS_PING& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_PING& default_instance();

  void Swap(CS_PING* other);

  // implements Message ----------------------------------------------

  CS_PING* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_PING& from);
  void MergeFrom(const CS_PING& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ansi_time = 1;
  inline bool has_ansi_time() const;
  inline void clear_ansi_time();
  static const int kAnsiTimeFieldNumber = 1;
  inline ::google::protobuf::int32 ansi_time() const;
  inline void set_ansi_time(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Protobuf.CS_PING)
 private:
  inline void set_has_ansi_time();
  inline void clear_has_ansi_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ansi_time_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_PbMsg_2eproto();
  friend void protobuf_AssignDesc_PbMsg_2eproto();
  friend void protobuf_ShutdownFile_PbMsg_2eproto();

  void InitAsDefaultInstance();
  static CS_PING* default_instance_;
};
// -------------------------------------------------------------------

class SC_PONG : public ::google::protobuf::Message {
 public:
  SC_PONG();
  virtual ~SC_PONG();

  SC_PONG(const SC_PONG& from);

  inline SC_PONG& operator=(const SC_PONG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_PONG& default_instance();

  void Swap(SC_PONG* other);

  // implements Message ----------------------------------------------

  SC_PONG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_PONG& from);
  void MergeFrom(const SC_PONG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ansi_time = 1;
  inline bool has_ansi_time() const;
  inline void clear_ansi_time();
  static const int kAnsiTimeFieldNumber = 1;
  inline ::google::protobuf::int32 ansi_time() const;
  inline void set_ansi_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protobuf.SC_PONG)
 private:
  inline void set_has_ansi_time();
  inline void clear_has_ansi_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ansi_time_;
  friend void  protobuf_AddDesc_PbMsg_2eproto();
  friend void protobuf_AssignDesc_PbMsg_2eproto();
  friend void protobuf_ShutdownFile_PbMsg_2eproto();

  void InitAsDefaultInstance();
  static SC_PONG* default_instance_;
};
// ===================================================================


// ===================================================================

// CS_PING

// required int32 ansi_time = 1;
inline bool CS_PING::has_ansi_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_PING::set_has_ansi_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_PING::clear_has_ansi_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_PING::clear_ansi_time() {
  ansi_time_ = 0;
  clear_has_ansi_time();
}
inline ::google::protobuf::int32 CS_PING::ansi_time() const {
  // @@protoc_insertion_point(field_get:Protobuf.CS_PING.ansi_time)
  return ansi_time_;
}
inline void CS_PING::set_ansi_time(::google::protobuf::int32 value) {
  set_has_ansi_time();
  ansi_time_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.CS_PING.ansi_time)
}

// required int32 id = 2;
inline bool CS_PING::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_PING::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_PING::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_PING::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CS_PING::id() const {
  // @@protoc_insertion_point(field_get:Protobuf.CS_PING.id)
  return id_;
}
inline void CS_PING::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.CS_PING.id)
}

// required string name = 3;
inline bool CS_PING::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS_PING::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS_PING::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS_PING::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CS_PING::name() const {
  // @@protoc_insertion_point(field_get:Protobuf.CS_PING.name)
  return *name_;
}
inline void CS_PING::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.CS_PING.name)
}
inline void CS_PING::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.CS_PING.name)
}
inline void CS_PING::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.CS_PING.name)
}
inline ::std::string* CS_PING::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.CS_PING.name)
  return name_;
}
inline ::std::string* CS_PING::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CS_PING::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.CS_PING.name)
}

// -------------------------------------------------------------------

// SC_PONG

// required int32 ansi_time = 1;
inline bool SC_PONG::has_ansi_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_PONG::set_has_ansi_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_PONG::clear_has_ansi_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_PONG::clear_ansi_time() {
  ansi_time_ = 0;
  clear_has_ansi_time();
}
inline ::google::protobuf::int32 SC_PONG::ansi_time() const {
  // @@protoc_insertion_point(field_get:Protobuf.SC_PONG.ansi_time)
  return ansi_time_;
}
inline void SC_PONG::set_ansi_time(::google::protobuf::int32 value) {
  set_has_ansi_time();
  ansi_time_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.SC_PONG.ansi_time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PbMsg_2eproto__INCLUDED
