// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PbMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PbMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PbMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PbMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PbMsg_2eproto;
class CS_PING;
class CS_PINGDefaultTypeInternal;
extern CS_PINGDefaultTypeInternal _CS_PING_default_instance_;
class SC_PONG;
class SC_PONGDefaultTypeInternal;
extern SC_PONGDefaultTypeInternal _SC_PONG_default_instance_;
class test_msg;
class test_msgDefaultTypeInternal;
extern test_msgDefaultTypeInternal _test_msg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CS_PING* Arena::CreateMaybeMessage<::CS_PING>(Arena*);
template<> ::SC_PONG* Arena::CreateMaybeMessage<::SC_PONG>(Arena*);
template<> ::test_msg* Arena::CreateMaybeMessage<::test_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class test_msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_msg) */ {
 public:
  test_msg();
  virtual ~test_msg();

  test_msg(const test_msg& from);
  test_msg(test_msg&& from) noexcept
    : test_msg() {
    *this = ::std::move(from);
  }

  inline test_msg& operator=(const test_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline test_msg& operator=(test_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const test_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const test_msg* internal_default_instance() {
    return reinterpret_cast<const test_msg*>(
               &_test_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(test_msg& a, test_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(test_msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline test_msg* New() const final {
    return CreateMaybeMessage<test_msg>(nullptr);
  }

  test_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<test_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const test_msg& from);
  void MergeFrom(const test_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(test_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PbMsg_2eproto);
    return ::descriptor_table_PbMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // int32 test = 1;
  void clear_test();
  ::PROTOBUF_NAMESPACE_ID::int32 test() const;
  void set_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test() const;
  void _internal_set_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:test_msg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PbMsg_2eproto;
};
// -------------------------------------------------------------------

class CS_PING :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_PING) */ {
 public:
  CS_PING();
  virtual ~CS_PING();

  CS_PING(const CS_PING& from);
  CS_PING(CS_PING&& from) noexcept
    : CS_PING() {
    *this = ::std::move(from);
  }

  inline CS_PING& operator=(const CS_PING& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_PING& operator=(CS_PING&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_PING& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_PING* internal_default_instance() {
    return reinterpret_cast<const CS_PING*>(
               &_CS_PING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CS_PING& a, CS_PING& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_PING* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_PING* New() const final {
    return CreateMaybeMessage<CS_PING>(nullptr);
  }

  CS_PING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_PING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_PING& from);
  void MergeFrom(const CS_PING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_PING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_PING";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PbMsg_2eproto);
    return ::descriptor_table_PbMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAnsiTimeFieldNumber = 1,
  };
  // int32 m_AnsiTime = 1;
  void clear_m_ansitime();
  ::PROTOBUF_NAMESPACE_ID::int32 m_ansitime() const;
  void set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_ansitime() const;
  void _internal_set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CS_PING)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_ansitime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PbMsg_2eproto;
};
// -------------------------------------------------------------------

class SC_PONG :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_PONG) */ {
 public:
  SC_PONG();
  virtual ~SC_PONG();

  SC_PONG(const SC_PONG& from);
  SC_PONG(SC_PONG&& from) noexcept
    : SC_PONG() {
    *this = ::std::move(from);
  }

  inline SC_PONG& operator=(const SC_PONG& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_PONG& operator=(SC_PONG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_PONG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_PONG* internal_default_instance() {
    return reinterpret_cast<const SC_PONG*>(
               &_SC_PONG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_PONG& a, SC_PONG& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_PONG* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_PONG* New() const final {
    return CreateMaybeMessage<SC_PONG>(nullptr);
  }

  SC_PONG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_PONG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_PONG& from);
  void MergeFrom(const SC_PONG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_PONG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_PONG";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PbMsg_2eproto);
    return ::descriptor_table_PbMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAnsiTimeFieldNumber = 1,
  };
  // int32 m_AnsiTime = 1;
  void clear_m_ansitime();
  ::PROTOBUF_NAMESPACE_ID::int32 m_ansitime() const;
  void set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_ansitime() const;
  void _internal_set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SC_PONG)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_ansitime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PbMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// test_msg

// int32 test = 1;
inline void test_msg::clear_test() {
  test_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_msg::_internal_test() const {
  return test_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_msg::test() const {
  // @@protoc_insertion_point(field_get:test_msg.test)
  return _internal_test();
}
inline void test_msg::_internal_set_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_ = value;
}
inline void test_msg::set_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test(value);
  // @@protoc_insertion_point(field_set:test_msg.test)
}

// -------------------------------------------------------------------

// CS_PING

// int32 m_AnsiTime = 1;
inline void CS_PING::clear_m_ansitime() {
  m_ansitime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_PING::_internal_m_ansitime() const {
  return m_ansitime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_PING::m_ansitime() const {
  // @@protoc_insertion_point(field_get:CS_PING.m_AnsiTime)
  return _internal_m_ansitime();
}
inline void CS_PING::_internal_set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_ansitime_ = value;
}
inline void CS_PING::set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_ansitime(value);
  // @@protoc_insertion_point(field_set:CS_PING.m_AnsiTime)
}

// -------------------------------------------------------------------

// SC_PONG

// int32 m_AnsiTime = 1;
inline void SC_PONG::clear_m_ansitime() {
  m_ansitime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_PONG::_internal_m_ansitime() const {
  return m_ansitime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_PONG::m_ansitime() const {
  // @@protoc_insertion_point(field_get:SC_PONG.m_AnsiTime)
  return _internal_m_ansitime();
}
inline void SC_PONG::_internal_set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_ansitime_ = value;
}
inline void SC_PONG::set_m_ansitime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_ansitime(value);
  // @@protoc_insertion_point(field_set:SC_PONG.m_AnsiTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PbMsg_2eproto
